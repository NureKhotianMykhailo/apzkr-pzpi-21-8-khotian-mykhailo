ВСТУП


	У сьогоденні децентральзовані фінансові системи стають все більш поширеними кожного дня. Все більше людей віддають перевагу криптовалютним активам через різні причини – децентралізація та повний контроль над власними збереженнями, або можливість заробити на стейкінгу або коливаннях цін на різні токени. Це дуже актуалізувало проблему безпеки подібних активів і створення фізичних гаманців як один з варіантів її вирішення. Допоки фізичний гаманець знаходиться у власника, його фінанси належать лише йому і ніяким чином не можуть бути використані без його дозволу. Подібна гарантія робить фізичні гаманці незамінним інструментом в руках будь-якого користувача, зацікавленому в децентралізованих фінансових системах. Крім того, фізичні гаманці мають додаткові рівні захисту, такі як PIN-коди, двофакторна аутентифікація та можливість створення резервних копій, що робить їх ще більш надійними. Використання фізичних гаманців також зменшує ризик хакерських атак та фішингових схем, які часто загрожують користувачам онлайн-гаманців. Таким чином, інвестори та користувачі криптовалют можуть зосередитися на своїх фінансових цілях, не турбуючись про безпеку своїх активів. Усе це робить фізичні гаманці важливим компонентом сучасної екосистеми децентралізованих фінансів.
        В якості архітектури програмної системи було обрано MVC (Model-View-Controller) для серверної частини, розроблена на фреймворку Express.js технології Node.js мови JavaScript, а також компонентну архітектуру для клієнтської частини, розроблену з використання бібіліотеки React.js мови JavaScript. Подібний стек технологій доволі поширений серед сучасних веб-додатків. В якості базі даних обрано MongoDB через те, що вона не є реляційною, що доволі зручно для частково структурованих даних. Також ця база даних розташована на сервері, що дозволяє отримати до неї доступ з будь-якого пристрою вже на етапі розробки продукту. Зараз MongoDB є найпоширенішою базою даних серед нереляційних і однією з найпоширеніших з усіх баз даних.


1 ВИМОГИ ДО ПРОГРАМНОЇ СИСТЕМИ
	1.1 Розробка vision & scope документа


	Для формулування вимог до програмної системи було розроблено vision & scope документ, наведений в додатку А.


2 СЕРВЕРНА ЧАСТИНА
	2.1 Опис функціоналу
        

	Для серверної частини додатку для програмної системи для керування пристроями для фізичного зберігання криптовалютних активів фізичною особою або групою фізичних осіб та їх інтеграції в web3 додатки.Серверна частина була написана на мові програмування Node.js з використанням Express.js framework. У даному проекті використовується MongoDB в якості СУБД. Для шифрування паролів використовується SHA-2 та для створення токенів авторизації було використано JWT (JSON Web Tokens). В якості testnet було обрано Blast-Sepolia.


	2.2 Діаграма розгортання


	Для створення серверної частини проекту було використано мову програмування Nods.js та фреймворк Express.js.
В якості бази даних було викостано MongoDB через зручність використання NoSQL бази даних в проекті.
Проект було розбито на три шари:
-        Middleware - бізнес логіка, що обраховує результат на основі вхідних даних. 
-        Controller – посередник між бізнес-шаром та запитами відповідно до REST специфікації.
-        Model – моделі об'єктів, що використовуються для взаємодії з базою даних.


	Розглянемо Deployment Diagram (діаграму розгортання), зображену в додатку Б на рисунку Б.1.
Наша програмна система має 3 складових: База даних MongoDB, що відповідає за збереження даних системи та поєднана з back-end частиною нашого застосунку, сама back-end складова, що відповідає за контакт front-end частини з базою даних, авторизацію та реєстрацію нових користувачів, генерацію JWT, створення криптовалютних гаманців та історії їх балансу, отримання актуального курсу токена. Також в нас є front-end складова, що під'єднанна до back-end складовою за допомогою HTTP запитів.


	2.3 Діаграма прецедентів


	У додатку Б на рисунку Б.2 наведено діаграму прецедентів для загальної архітектури системи. Розглянемо детальніше цю діаграму. Користувач може реєструватись та авторизуватись за допомогою back-end, а також надсилати запити на перегляд власного портфоліо, списку відомих аккаунтів, перегляд портфоліо конкретного аккаунта, змінити власні налаштування, відправка транзакції та отримати QR-code з адресою свого гаманця.


	2.4 ER-модель даних


У додатку Б на рисунку Б.3 наведено ER-модель даних. Для розробки програмного продукту було обрано NOSQL базу даних MongoDB. Під час реалізації бази даних було створена наступна колекція:
-        Users (Таблиця з даними про користувачів та ролі користувачів, налаштування);


Мала кількість колекцій пов'язана з можливістю не зберігати дані про транзакції, а отримати їх напряму з блокчейну, а також нереляційною базою даних, котра дозволяє зменшити кількість таблиць шляхом використання об'єктів та масивів в якості значення.


	2.5 Діаграма діяльності


	У додатку Б на рисунку Б.4 наведено діаграму діяльності, на якій зображено процес надсилання транзакції на інший гаманець та зміна історії балансу користувача.


	2.6 REST специфікація


При написанні серверної частини додатку було дотримано принципів REST. Ця архітектура визначає, як система має бути організована для того щоб бути масштабованою та забезпечувати простоту інтеграції з різними компонентами. REST специфікація наведена в таблиці 1.

	Таблиця 1 – REST спеціфікація
Назва 			Метод	Шлях		Тіло запиту
	
Register		POST 	/auth/register	{
							“name”: “string”,
							“email”: “string”
							“pwd”:“string”,
						}
Login 			POST 	 /auth/login 	{
							“email”: “string”,
							“pwd”: “string”
						}
Logout 			GET 	/auth/logout	
	
Refresh 		GET 	/auth/refresh
		
Get user info		GET	/api/user
	
Update user info	PUT	/api/user	{
							"username":string,
							"email":"string",
							"roles" :"int",
							"settings" : {
							    "isEngLanguage: boolean,
							    "isEngRegion": boolean,
							    "hideEmptyTokens": boolean",
							},
							"staredAccounts": ["string"],
							"wallet": "string"
						}
Send transaction	POST 	/api/sendtrx	{
							"amount": "float",
							"receiver":"string"
						}

Продовження таблиці 1

Get wallet		POST 	/api/wallet	{
							"address": "string"
						}
Get balance		POST 	/api/balance	{
							"address": "string"
						}


3 КЛІЄНТСЬКА ЧАСТИНА
        3.1 Опис функціоналу


        Front-end складова програмної системи виконана за допомогою React.js. Додаток підтримує локалізацію для двох мов - англійської та української,  які можна змінювати в налаштуваннях. Також додаток підтримує інтернаціоналізацію у такому вигляді: дата в форматі DD.MM.YYYY для українського регіону та MM.DD.YYYY для американського. На головній сторінці розміщено портфоліо користувача, що містить в собі граф з балансом користувача з плином часу та таблицю  з розподілом токенів та актуальною ринковою ціною на ці токени. Також користувач може аналогічно переглядати аккаунти інших користувачів, а також список відомих та збережених аккаунтів, а також додавати та прибирати зі збережених. Користувач може переглядати та змінювати власні налаштування, а також отримати QR-код з власною адресою та переказати транзакцію.


        3.2 Діаграма прецедентів


        Розглянемо діаграму прецедентів для Front-end, наведену в додатку В на рисунку В.1.
Неавторизований користувач може стати авторизованим після авторизації. У разі відсутності аккаунта користувач може зареєструватись. Авторизований користувач може переглядати власне портфоліо, що містить в собі граф з балансом користувача з плином часу та таблицю  з розподілом токенів та актуальною ринковою ціною на ці токени.


	3.3 Діаграма компонент


	Розглянемо діаграму компонент, наведену в додатку В на рисунку В.2.
Кожна компонента має в собі .jsx складову. Стартова компонента - Auth.jsx, відповідальна за авторизацію користувачів. Від неї користувач може потрапити до реєстрації (Register.jsx).Після авторизації користувач потрапляє на сторінку портфоліо, звідки він може потрапити на сторінки аккаунтів (Accounts.jsx) та налаштувань (Settings.jsx). При перегляді сторінки аккаунтів можна перейти на сторінку конкретного гаманця (User.jsx).


	3.4 Діаграма станів


	Розглянемо діаграму станів, наведену в додатку В  на рисунку В.3.
Розглянемо її детальніше. Після відкриття сайта в браузері, неавторизований користувач потрапляє на стартову сторінку авторизації, звідки можна перейти на сторінку реєстрації, якщо він не має аккаунта, і повернутись назад авторизації, якщо він його має. Після авторизації, користувач стає авторизованим, і потрапляє на сторінку перегляду власного портфоліо. Звідти він може потрапити на сторінку аккаунтів або налаштувань. Зі сторінки аккаунтів можна перейти на сторінку конкретного користувача. Після закриття сторінки в браузері система припиняє роботу. 


	3.5 Діаграма діяльності


        Розглянемо діаграму активності, наведену в додатку В  на рисунку В.4.
Розглянемо її детальніше. Після відкриття сайта в браузері, неавторизований користувач потрапляє на стартову сторінку авторизації, звідки він може перейти на сторінку реєстрації у разі відсутності акаунта Після авторизації, користувач стає авторизованим, і потрапляє на сторінку переглядів власного портфоліо. Після натискання на конкретний аккаунт, користувач потрапляє до сторінки конкретного аккаунта, з якої повертається за власним бажанням. З головної сторінки також користувач може попасти на налаштування, якщо натисне на відповідну кнопку в меню. Система припиняє роботу після закриття браузера. Також після натискання кнопки виходу з акаунта, користувач виходить з аккаунта та повертається на головну.


ВИСНОВКИ


        Прогятом роботи було створено програмну систему для керування пристроями для фізичного зберігання криптовалютних активів фізичною особою або групою фізичних осіб та їх інтеграції в web3 додатки. Проект виконаний за стандартами чистоти коду. Для серверної частини було використано Node.js та фреймфорк Express.js. Для клієнтської частини було використано React.js. В якості архітектури було обрано MVC для серверної частини та компоненти для клієнтської частини.
        Виконання курсової  роботи допомогло поглибити знання з розробки веб-додатків, архітектури програмної системи, а також збільшило розуміння принципів роботи децентралізованих систем та маніпуляцій з криптоактивами.


Посилання на демо-відео:
https://youtu.be/FTH6hp7FTS0
Посилання на репозиторій GitHub:
https://github.com/NureKhotianMykhailo/apzkr-pzpi-21-8-khotian-mykhailo
